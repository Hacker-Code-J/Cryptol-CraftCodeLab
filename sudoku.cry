module Sudoku where

/* 1,2, ..., 9(=0x1001) -> 4-bit*/
type SudokuNum = [4]

/* 3 x 3 square of 'Num' */
type SudokuGroup = [9]

/* 9 x 9 grid of 'SudokNum' */
type SudokuBoard = [9]SudokuGroup

/** a solution to the easy puzzle */
puzzle_solution :
    SudokuBoard
puzzle_solution =
    [[2, 9, 5, 7, 4, 3, 8, 6, 1],
     [4, 3, 1, 8, 6, 5, 9, 2, 7],
     [8, 7, 6, 1, 9, 2, 5, 4, 3],
     [3, 8, 7, 4, 5, 9, 2, 1, 6],
     [6, 1, 2, 3, 8, 7, 4, 9, 5],
     [5, 4, 9, 2, 1, 6, 7, 3, 8],
     [7, 6, 3, 5, 2, 4, 1, 8, 9],
     [9, 2, 8, 6, 7, 1, 3, 5, 4],
     [1, 5, 4, 9, 3, 8, 6, 7, 2]]

/** The easy puzzle's solution is valid. */
puzzle_solution_valid :
    Bit
property puzzle_solution_valid =
    valid puzzle_solution

/** The easy puzzle's solution is unique. */
puzzle_unique :
    [_]SudokuNum -> Bit
property puzzle_unique
           [a1,     a3,     a5, a6,         a9,
            b1,         b4, b5,     b7,     b9,
            c2,     c4, c5, c6, c7, c8, c9    ,
            d1, d2,     d4,     d6, d7, d8    ,
            e1, e2, e3,     e5,     e7, e8, e9,
            f2, f3, f4,     f6,     f8, f9    ,
            g1, g2, g3, g4, g5, g6,     g8    ,
            h1,     h3,     h5, h6,         h9,
            i1,         i4, i5,     i7,     i9] =
    solution == puzzle_solution \/ ~ valid solution
      where
        solution =
          [[a1,  9, a3,  7, a5, a6,  8,  6, a9],
           [b1,  3,  1, b4, b5,  5, b7,  2, b9],
           [ 8, c2,  6, c4, c5, c6, c7, c8, c9],
           [d1, d2,  7, d4,  5, d6, d7, d8,  6],
           [e1, e2, e3,  3, e5,  7, e7, e8, e9],
           [ 5, f2, f3, f4,  1, f6,  7, f8, f9],
           [g1, g2, g3, g4, g5, g6,  1, g8,  9],
           [h1,  2, h3,  6, h5, h6,  3,  5, h9],
           [i1,  5,  4, i4, i5,  8, i7,  7, i9]]