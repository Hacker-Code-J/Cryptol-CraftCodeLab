module Sudoku where

type SudokuNum = [4]                // 1, 2, ..., 9 (0x1 to 0x9), represented in 4 bits
type SudokuGroup = [9]SudokuNum     // A group of 9 Sudoku numbers (either a row, column, or box)
type SudokuBoard = [9]SudokuGroup   // A 9x9 Sudoku board

check : SudokuGroup -> Bit
check group = [ contains x | x <- [1 .. 9] ] == ~zero
  where contains x = [ x == y | y <- group ] != zero

/** whether finite sequence `G` contains element `x` */
contains' :
    {a, n}
    (Cmp a, fin n) =>
    [n]a -> a -> Bit
contains' G x =
    elem x G

/**
 * whether finite sequence `G` contains all items in finite
 * sequence `H`
 */
supset' :
    {a, n}
    (Cmp a, fin n) =>
    [n]a -> [n]a -> Bit
supset' G H =
    all (contains' G) H

/** whether `SudokuGroup` `G` contains one of each number 1-9 */
check' :
    SudokuGroup -> Bit
check' G =
    supset' G [1..9]

/** `check` and `check'` are equivalent. */
check_equiv : SudokuGroup -> Bit
property check_equiv = check === check'

valid : SudokuBoard -> Bit
valid rows = [ check grp | grp <- rows # columns # squares ] == ~zero
 where
    columns = transpose rows
    regions = transpose [ groupBy`{3} row | row <- rows ]
    squares = [ join sq | sq <- groupBy`{3} (join regions) ]

valid' : SudokuBoard -> Bit
valid' rows = all check (rows # columns # squares)
  where
    columns = transpose rows
    regions = transpose (map groupBy`{3} rows)
    squares = map join (groupBy`{3} (join regions))

valid_equiv:
    SudokuBoard -> Bit
property valid_equiv =
    valid === valid'

/** This puzzle from the Cryptol blog has a solution. */
puzzle :
    [_]SudokuNum -> Bit
puzzle
     [a1,     a3,     a5, a6,         a9,
      b1,         b4, b5,     b7,     b9,
      c2,     c4, c5, c6, c7, c8, c9    ,
      d1, d2,     d4,     d6, d7, d8    ,
      e1, e2, e3,     e5,     e7, e8, e9,
      f2, f3, f4,     f6,     f8, f9    ,
      g1, g2, g3, g4, g5, g6,     g8    ,
      h1,     h3,     h5, h6,         h9,
      i1,         i4, i5,     i7,     i9] =
  valid
    [[a1,  9, a3,  7, a5, a6,  8,  6, a9],
     [b1,  3,  1, b4, b5,  5, b7,  2, b9],
     [ 8, c2,  6, c4, c5, c6, c7, c8, c9],
     [d1, d2,  7, d4,  5, d6, d7, d8,  6],
     [e1, e2, e3,  3, e5,  7, e7, e8, e9],
     [ 5, f2, f3, f4,  1, f6,  7, f8, f9],
     [g1, g2, g3, g4, g5, g6,  1, g8,  9],
     [h1,  2, h3,  6, h5, h6,  3,  5, h9],
     [i1,  5,  4, i4, i5,  8, i7,  7, i9]]

/** a solution to the easy puzzle */
puzzle_solution :
    SudokuBoard
puzzle_solution =
    [[2, 9, 5, 7, 4, 3, 8, 6, 1],
     [4, 3, 1, 8, 6, 5, 9, 2, 7],
     [8, 7, 6, 1, 9, 2, 5, 4, 3],
     [3, 8, 7, 4, 5, 9, 2, 1, 6],
     [6, 1, 2, 3, 8, 7, 4, 9, 5],
     [5, 4, 9, 2, 1, 6, 7, 3, 8],
     [7, 6, 3, 5, 2, 4, 1, 8, 9],
     [9, 2, 8, 6, 7, 1, 3, 5, 4],
     [1, 5, 4, 9, 3, 8, 6, 7, 2]]

/** The easy puzzle's solution is valid. */
puzzle_solution_valid :
    Bit
property puzzle_solution_valid =
    valid puzzle_solution

/** The easy puzzle's solution is unique. */
puzzle_unique :
    [_]SudokuNum -> Bit
property puzzle_unique
           [a1,     a3,     a5, a6,         a9,
            b1,         b4, b5,     b7,     b9,
            c2,     c4, c5, c6, c7, c8, c9    ,
            d1, d2,     d4,     d6, d7, d8    ,
            e1, e2, e3,     e5,     e7, e8, e9,
            f2, f3, f4,     f6,     f8, f9    ,
            g1, g2, g3, g4, g5, g6,     g8    ,
            h1,     h3,     h5, h6,         h9,
            i1,         i4, i5,     i7,     i9] =
    solution == puzzle_solution \/ ~ valid solution
      where
        solution =
          [[a1,  9, a3,  7, a5, a6,  8,  6, a9],
           [b1,  3,  1, b4, b5,  5, b7,  2, b9],
           [ 8, c2,  6, c4, c5, c6, c7, c8, c9],
           [d1, d2,  7, d4,  5, d6, d7, d8,  6],
           [e1, e2, e3,  3, e5,  7, e7, e8, e9],
           [ 5, f2, f3, f4,  1, f6,  7, f8, f9],
           [g1, g2, g3, g4, g5, g6,  1, g8,  9],
           [h1,  2, h3,  6, h5, h6,  3,  5, h9],
           [i1,  5,  4, i4, i5,  8, i7,  7, i9]]