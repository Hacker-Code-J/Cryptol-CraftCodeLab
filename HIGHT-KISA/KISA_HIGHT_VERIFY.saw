/*
  * Copyright (c) 2024 Crypto & Security Engineering Lab (CSE).
  * author Ji, Yong-hyeon <hacker3740@kookmin.ac.kr>
  * https://sites.google.com/kookmin.ac.kr/cselab/club-activity?authuser=0

  * Distributed under the terms of the BSD3 license (see LICENSE file)

  * References
  * Using the Software Analysis Workbench (SAW)
 */

// include "helpers.saw";
import "KISA_HIGHT_SPEC.cry";

let alloc_init ty v = do {
  p <- llvm_alloc ty;
  llvm_points_to p v;
  return p;
};

let alloc_init_readonly ty v = do {
  p <- llvm_alloc_readonly ty;
  llvm_points_to p v;
  return p;
};

let ptr_to_fresh n ty = do {
  x <- llvm_fresh_var n ty;
  p <- alloc_init ty (llvm_term x);
  return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
  x <- llvm_fresh_var n ty;
  p <- alloc_init_readonly ty (llvm_term x);
  return (x, p);
};

// Define the setup for encKeySchedule
let KeySched_OK : LLVMSetup () = do {
    (MK, pMK) <- ptr_to_fresh_readonly "MK" (llvm_array 16 (llvm_int 8));
    (RK, pRK) <- ptr_to_fresh "RK" (llvm_array 136 (llvm_int 8));

    llvm_execute_func [ pMK,
                        llvm_term {{ 0 : [32] }},
                        pRK ];

    llvm_points_to pRK (llvm_term {{ HIGHT_KeySched_Cryptol MK }});
};

// Define the setup for HIGHT_Encrypt
let HIGHT_Encrypt_OK : LLVMSetup () = do {
    (RK, pRK) <- ptr_to_fresh_readonly "RK" (llvm_array 136 (llvm_int 8));
    (src, pSRC) <- ptr_to_fresh "src" (llvm_array 8 (llvm_int 8));
    
    llvm_execute_func [ pRK,
                        pSRC ];

    llvm_points_to pSRC (llvm_term {{ HIGHT_Encrypt_Cryptol RK src }});
};


// Define the setup for HIGHT_Decrypt
let HIGHT_Decrypt_OK : LLVMSetup () = do {
    (RK, pRK) <- ptr_to_fresh_readonly "RK" (llvm_array 136 (llvm_int 8));
    (src, pSRC) <- ptr_to_fresh "src" (llvm_array 8 (llvm_int 8));
    
    llvm_execute_func [ pRK,
                        pSRC ];

    llvm_points_to pSRC (llvm_term {{ HIGHT_Decrypt_Cryptol RK src }});
};

let print_header msg = do {
    print "======================================";
    print msg;
    print "======================================";
};

// Main function to run the verification
let main : TopLevel () = do {
    m <- llvm_load_module "KISA_HIGHT_ECB.bc";

    print_header "Verification for HIGHT KeySchedule";
    print " ";
    print "[*] Module: KISA_HIGHT_ECB.bc";
    print "[*] Specification: HIGHT_KeySched_OK";
    print " ";

    time (do { llvm_verify m "HIGHT_KeySched" [] true KeySched_OK z3; });

    print "======================================";
    print "Verification completed.";
    print "======================================";
    print_header "Verification for HIGHT Algorithm";
    print " ";
    print "[*] Module: KISA_HIGHT_ECB.bc";
    print "[*] Specification: HIGHT_Encrypt_OK / HIGHT_Decrypt_OK";
    print " ";
    time (do {
        llvm_verify m "HIGHT_Encrypt" [] true HIGHT_Encrypt_OK z3;
    });
    time (do {
        llvm_verify m "HIGHT_Decrypt" [] true HIGHT_Decrypt_OK z3;
    });
    
    print "======================================";
    print "Verification completed.";
    print "======================================";
};