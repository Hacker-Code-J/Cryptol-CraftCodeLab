include "helpers.saw";
import "HIGHT-KISA.cry";

// Define the setup for encKeySchedule
let KeySched_setup : CrucibleSetup () = do {
    (MK, p_mk) <- ptr_to_fresh_readonly "MK" (llvm_array 16 (llvm_int 8));
    (RK, p_rk) <- ptr_to_fresh "RK" (llvm_array 136 (llvm_int 8));

    llvm_execute_func [p_mk, llvm_term {{ 0 : [32] }}, p_rk];

    let result = {{ HIGHT_KeySched_Cryptol MK }};
    llvm_points_to p_rk (llvm_term result);
};

// Define the setup for HIGHT_Encrypt
let HIGHT_Encrypt_setup : CrucibleSetup () = do {
    (RK, p_rk) <- ptr_to_fresh_readonly "RK" (llvm_array 136 (llvm_int 8));
    (src, p_src) <- ptr_to_fresh_readonly "src" (llvm_array 8 (llvm_int 8));
    (dst, p_dst) <- ptr_to_fresh "dst" (llvm_array 8 (llvm_int 8));
    
    llvm_execute_func [p_rk, p_src, p_dst];

    let result = {{ HIGHT_Encrypt_Cryptol (RK, src) }};
    llvm_points_to p_dst (llvm_term result);
};

// // Define the setup for HIGHT_Decrypt
// let HIGHT_Decrypt_setup : CrucibleSetup () = do {
//     (dst, p_dst) <- ptr_to_fresh "dst" (llvm_array 8 (llvm_int 8));
//     (src, p_src) <- ptr_to_fresh_readonly "src" (llvm_array 8 (llvm_int 8));
//     (MK, p_MK) <- ptr_to_fresh_readonly "MK" (llvm_array 16 (llvm_int 8));

//     llvm_execute_func [p_dst, p_src, p_MK];

//     let result = {{ HIGHT_Decrypt (dst, src, MK) }};
//     llvm_points_to p_dst (llvm_term result);
// };

// Main function to run the verification
let main : TopLevel () = do {
    m <- llvm_load_module "KISA_HIGHT_ECB.bc";

    print "[ Start ==========================> ]";
    KeySched_verify <- llvm_verify m "HIGHT_KeySched" [] true KeySched_setup z3;
    print "[ ============================= End ]";

    print "[ Start ==========================> ]";
    HIGHT_Encrypt_verify <- llvm_verify m "HIGHT_Encrypt" [] true HIGHT_Encrypt_setup z3;
    print "[ ============================= End ]";
    
    // Print the verification result
    print KeySched_verify;
    print HIGHT_Encrypt_verify;
};