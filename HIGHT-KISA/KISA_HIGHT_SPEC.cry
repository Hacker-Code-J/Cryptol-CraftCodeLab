/*
  * Copyright (c) 2024 Crypto & Security Engineering Lab (CSE).
  * author Ji, Yong-hyeon <hacker3740@kookmin.ac.kr>.
  * https://sites.google.com/kookmin.ac.kr/cselab/club-activity?authuser=0

  * Distributed under the terms of the BSD3 license (see LICENSE file)
  
  * References
  * https://seed.kisa.or.kr/kisa/algorithm/EgovHightInfo.do
 */
module HIGHT_KISA where

// Test Vectors
tvKey1 : [128]
tvKey1 = 0x00112233445566778899aabbccddeeff
tvKey2 : [128]
tvKey2 = 0xffeeddccbbaa99887766554433221100
tvKey3 : [128]
tvKey3 = 0x000102030405060708090a0b0c0d0e0f
tvKey4 : [128]
tvKey4 = 0x28dbc3bc49ffd87dcfa509b11d422be7

tvPT1 : [64]
tvPT1 = zero
tvPT2 : [64]
tvPT2 = 0x0011223344556677
tvPT3 : [64]
tvPT3 = 0x0123456789abcdef
tvPT4 : [64]
tvPT4 = 0xb41e6be2eba84a14

tvCT1 : [64]
tvCT1 = 0x00f418aed94f03f2
tvCT2 : [64]
tvCT2 = 0x23ce9f72e543e6d8
tvCT3 : [64]
tvCT3 = 0x7a6fb2a28d23f466
tvCT4 : [64]
tvCT4 = 0xcc047a75209c1fc6

TVKey1 : [16][8]
TVKey1 = reverse (split (tvKey1 : [128]))
TVKey2 : [16][8]
TVKey2 = reverse (split (tvKey2 : [128]))
TVKey3 : [16][8]
TVKey3 = reverse (split (tvKey3 : [128]))
TVKey4 : [16][8]
TVKey4 = reverse (split (tvKey4 : [128]))

TVPT1 : [8][8]
TVPT1 = reverse (split (tvPT1 : [64]))
TVPT2 : [8][8]
TVPT2 = reverse (split (tvPT2 : [64]))
TVPT3 : [8][8]
TVPT3 = reverse (split (tvPT3 : [64]))
TVPT4 : [8][8]
TVPT4 = reverse (split (tvPT4 : [64]))

TVCT1 : [8][8]
TVCT1 = reverse (split (tvCT1 : [64]))
TVCT2 : [8][8]
TVCT2 = reverse (split (tvCT2 : [64]))
TVCT3 : [8][8]
TVCT3 = reverse (split (tvCT3 : [64]))
TVCT4 : [8][8]
TVCT4 = reverse (split (tvCT4 : [64]))


TVSK1 = [0xe7135b59, 0xc99cb0c8, 0x906d96d7, 0x2c6a5599,
 0x27032ade, 0xb5e32d31, 0xced9de4e, 0x48919180,
 0xf915b5f4, 0xfadc0ee2, 0xbba15439, 0x9fadb9bf,
 0x16b7f8e8, 0xe41e0239, 0xd9451b36, 0xa9b0ad97,
 0xcfa7c7f6, 0x48555f62, 0x1f50a1b1, 0xa5986d86,
 0x0706f33c, 0xfb2b7aff, 0x7a755a93, 0x7bb39134,
 0xbcdf15f0, 0xef018ca2, 0x2a436495, 0xae882255,
 0xc7e50f52, 0x67d9bcf0, 0x61a18fda, 0xd1357c79] : [32][32] // 32 * 32 = 128 * 16, 1024-bit (128-byte)
 
TVSK2 = [ 0x4e587e5a, 0xb8695b51, 0x07c2c9e8, 0x2b471032,
  0x6c262bcd, 0x828eb698, 0x230cef4d, 0x254c2af7,
  0x1c16a4c1, 0xa5657527, 0xeeb25316, 0x5a463014,
  0x17a6c593, 0x6d85475c, 0xea44f8f1, 0x422702ca,
  0xbe74727f, 0xaf9a8263, 0x1e2d5c4a, 0x1ceda097,
  0xd4b17ca3, 0x404e7bee, 0x5730f30a, 0xd0e6a233,
  0x67687c35, 0x12027b6f, 0xe5dcdbea, 0xe1992132,
  0x504c5475, 0x68c8899b, 0xfa18e40d, 0xe2345934 ] : [32][32]

TVSK3 = [ 0x27437b69, 0x490c1018, 0x501d3667, 0x2c5a3569,
  0x57233a5e, 0x25437d71, 0x7e796e4e, 0x38716140,
  0x19253564, 0x5a2c4e12, 0x5b315429, 0x7f7d796f,
  0x26376848, 0x345e3259, 0x69450b16, 0x79705d37,
  0x4f172746, 0x88857f72, 0x1f408181, 0x65480d16,
  0x7766437c, 0x2b4b8a7f, 0x6a552a53, 0x2b532134,
  0x1c2f5520, 0x0f110c12, 0x0a132445, 0x4e182245,
  0x17253f72, 0x77592c50, 0x31613f7a, 0x61356c59 ] : [32][32]

TVSK4 = [ 0x38789841, 0x10a80fbe, 0x951708dd, 0x5434f622,
  0x8c401225, 0xc1422382, 0x784be476, 0x12321a85,
  0x36fdfc00, 0x59d25f47, 0x2da77c03, 0x4036be69,
  0xfefe0447, 0xda6f6776, 0xdf6de5d7, 0x32b55709,
  0x16b326ec, 0x99ba9c4a, 0x471a423a, 0xaa42df8c,
  0x1365e98d, 0x60686246, 0x4416e398, 0x2525975c,
  0x1bd56655, 0x2ce9d3ae, 0xcbcc693f, 0x208e4a1f,
  0xbd36748f, 0x4f20c84f, 0xeaa6394c, 0xd75d461a ] : [32][32]

// Function to reverse the bytes in a 32-bit word
reverseBytesInWord : [32] -> [4][8]
reverseBytesInWord w = reverse (split w)

// Function to transform the list of 32-bit words
transformTVSK : [32][32] -> [128][8]
transformTVSK words = join [reverseBytesInWord w | w <- words]

// Implementation of HIGHT with Cryptol Language

// Pre-computation Table for Delta (LFSR)
delta_table : [128][8]
delta_table = [ 
  0x5a, 0x6d, 0x36, 0x1b, 0x0d, 0x06, 0x03, 0x41, // 0 ~ 7
  0x60, 0x30, 0x18, 0x4c, 0x66, 0x33, 0x59, 0x2c, // 8 ~ 15
  0x56, 0x2b, 0x15, 0x4a, 0x65, 0x72, 0x39, 0x1c, // 16 ~ 23 
  0x4e, 0x67, 0x73, 0x79, 0x3c, 0x5e, 0x6f, 0x37, // 24 ~ 31 
  0x5b, 0x2d, 0x16, 0x0b, 0x05, 0x42, 0x21, 0x50, // 32 ~ 39 
  0x28, 0x54, 0x2a, 0x55, 0x6a, 0x75, 0x7a, 0x7d, // 40 ~ 47 
  0x3e, 0x5f, 0x2f, 0x17, 0x4b, 0x25, 0x52, 0x29, // 48 ~ 55 
  0x14, 0x0a, 0x45, 0x62, 0x31, 0x58, 0x6c, 0x76, // 56 ~ 63 
  0x3b, 0x1d, 0x0e, 0x47, 0x63, 0x71, 0x78, 0x7c, // 64 ~ 71 
  0x7e, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x43, 0x61, // 72 ~ 79 
  0x70, 0x38, 0x5c, 0x6e, 0x77, 0x7b, 0x3d, 0x1e, // 80 ~ 87 
  0x4f, 0x27, 0x53, 0x69, 0x34, 0x1a, 0x4d, 0x26, // 88 ~ 95 
  0x13, 0x49, 0x24, 0x12, 0x09, 0x04, 0x02, 0x01, // 96 ~ 103 
  0x40, 0x20, 0x10, 0x08, 0x44, 0x22, 0x11, 0x48, // 104 ~ 111 
  0x64, 0x32, 0x19, 0x0c, 0x46, 0x23, 0x51, 0x68, // 112 ~ 119 
  0x74, 0x3a, 0x5d, 0x2e, 0x57, 0x6b, 0x35, 0x5a  // 120 ~ 127
]

F0 : [256][8] 
F0 = [
  0x00,0x86,0x0D,0x8B,0x1A,0x9C,0x17,0x91,
  0x34,0xB2,0x39,0xBF,0x2E,0xA8,0x23,0xA5,
  0x68,0xEE,0x65,0xE3,0x72,0xF4,0x7F,0xF9,
  0x5C,0xDA,0x51,0xD7,0x46,0xC0,0x4B,0xCD,
  0xD0,0x56,0xDD,0x5B,0xCA,0x4C,0xC7,0x41,
  0xE4,0x62,0xE9,0x6F,0xFE,0x78,0xF3,0x75,
  0xB8,0x3E,0xB5,0x33,0xA2,0x24,0xAF,0x29,
  0x8C,0x0A,0x81,0x07,0x96,0x10,0x9B,0x1D,
  0xA1,0x27,0xAC,0x2A,0xBB,0x3D,0xB6,0x30,
  0x95,0x13,0x98,0x1E,0x8F,0x09,0x82,0x04,
  0xC9,0x4F,0xC4,0x42,0xD3,0x55,0xDE,0x58,
  0xFD,0x7B,0xF0,0x76,0xE7,0x61,0xEA,0x6C,
  0x71,0xF7,0x7C,0xFA,0x6B,0xED,0x66,0xE0,
  0x45,0xC3,0x48,0xCE,0x5F,0xD9,0x52,0xD4,
  0x19,0x9F,0x14,0x92,0x03,0x85,0x0E,0x88,
  0x2D,0xAB,0x20,0xA6,0x37,0xB1,0x3A,0xBC,
  0x43,0xC5,0x4E,0xC8,0x59,0xDF,0x54,0xD2,
  0x77,0xF1,0x7A,0xFC,0x6D,0xEB,0x60,0xE6,
  0x2B,0xAD,0x26,0xA0,0x31,0xB7,0x3C,0xBA,
  0x1F,0x99,0x12,0x94,0x05,0x83,0x08,0x8E,
  0x93,0x15,0x9E,0x18,0x89,0x0F,0x84,0x02,
  0xA7,0x21,0xAA,0x2C,0xBD,0x3B,0xB0,0x36,
  0xFB,0x7D,0xF6,0x70,0xE1,0x67,0xEC,0x6A,
  0xCF,0x49,0xC2,0x44,0xD5,0x53,0xD8,0x5E,
  0xE2,0x64,0xEF,0x69,0xF8,0x7E,0xF5,0x73,
  0xD6,0x50,0xDB,0x5D,0xCC,0x4A,0xC1,0x47,
  0x8A,0x0C,0x87,0x01,0x90,0x16,0x9D,0x1B,
  0xBE,0x38,0xB3,0x35,0xA4,0x22,0xA9,0x2F,
  0x32,0xB4,0x3F,0xB9,0x28,0xAE,0x25,0xA3,
  0x06,0x80,0x0B,0x8D,0x1C,0x9A,0x11,0x97,
  0x5A,0xDC,0x57,0xD1,0x40,0xC6,0x4D,0xCB,
  0x6E,0xE8,0x63,0xE5,0x74,0xF2,0x79,0xFF
]

F1 : [256][8] 
F1 = [
  0x00,0x58,0xB0,0xE8,0x61,0x39,0xD1,0x89,
  0xC2,0x9A,0x72,0x2A,0xA3,0xFB,0x13,0x4B,
  0x85,0xDD,0x35,0x6D,0xE4,0xBC,0x54,0x0C,
  0x47,0x1F,0xF7,0xAF,0x26,0x7E,0x96,0xCE,
  0x0B,0x53,0xBB,0xE3,0x6A,0x32,0xDA,0x82,
  0xC9,0x91,0x79,0x21,0xA8,0xF0,0x18,0x40,
  0x8E,0xD6,0x3E,0x66,0xEF,0xB7,0x5F,0x07,
  0x4C,0x14,0xFC,0xA4,0x2D,0x75,0x9D,0xC5,
  0x16,0x4E,0xA6,0xFE,0x77,0x2F,0xC7,0x9F,
  0xD4,0x8C,0x64,0x3C,0xB5,0xED,0x05,0x5D,
  0x93,0xCB,0x23,0x7B,0xF2,0xAA,0x42,0x1A,
  0x51,0x09,0xE1,0xB9,0x30,0x68,0x80,0xD8,
  0x1D,0x45,0xAD,0xF5,0x7C,0x24,0xCC,0x94,
  0xDF,0x87,0x6F,0x37,0xBE,0xE6,0x0E,0x56,
  0x98,0xC0,0x28,0x70,0xF9,0xA1,0x49,0x11,
  0x5A,0x02,0xEA,0xB2,0x3B,0x63,0x8B,0xD3,
  0x2C,0x74,0x9C,0xC4,0x4D,0x15,0xFD,0xA5,
  0xEE,0xB6,0x5E,0x06,0x8F,0xD7,0x3F,0x67,
  0xA9,0xF1,0x19,0x41,0xC8,0x90,0x78,0x20,
  0x6B,0x33,0xDB,0x83,0x0A,0x52,0xBA,0xE2,
  0x27,0x7F,0x97,0xCF,0x46,0x1E,0xF6,0xAE,
  0xE5,0xBD,0x55,0x0D,0x84,0xDC,0x34,0x6C,
  0xA2,0xFA,0x12,0x4A,0xC3,0x9B,0x73,0x2B,
  0x60,0x38,0xD0,0x88,0x01,0x59,0xB1,0xE9,
  0x3A,0x62,0x8A,0xD2,0x5B,0x03,0xEB,0xB3,
  0xF8,0xA0,0x48,0x10,0x99,0xC1,0x29,0x71,
  0xBF,0xE7,0x0F,0x57,0xDE,0x86,0x6E,0x36,
  0x7D,0x25,0xCD,0x95,0x1C,0x44,0xAC,0xF4,
  0x31,0x69,0x81,0xD9,0x50,0x08,0xE0,0xB8,
  0xF3,0xAB,0x43,0x1B,0x92,0xCA,0x22,0x7A,
  0xB4,0xEC,0x04,0x5C,0xD5,0x8D,0x65,0x3D,
  0x76,0x2E,0xC6,0x9E,0x17,0x4F,0xA7,0xFF
]

// ======================== Key Schedule ========================

// Function to rotate the second half of the key once to the left
rotateLeft8 : [8][8] -> [8][8]
rotateLeft8 block = drop`{1} block # take`{1} block

rotateRight8 : [8][8] -> [8][8]
rotateRight8 block = drop`{7} block # take`{7} block

right_update_MK : [16][8] -> [16][8]
right_update_MK mk = rotatedMK
    where
    (firstHalf, secondHalf) = splitAt`{8} mk
    rotatedFirstHalf = rotateRight8 firstHalf
    rotatedSecondHalf = rotateRight8 secondHalf
    rotatedMK = rotatedFirstHalf # rotatedSecondHalf

left_update_MK : [16][8] -> [16][8]
left_update_MK mk = rotatedMK
    where
    (firstHalf, secondHalf) = splitAt`{8} mk
    rotatedFirstHalf = rotateLeft8 firstHalf
    rotatedSecondHalf = rotateLeft8 secondHalf
    rotatedMK = rotatedFirstHalf # rotatedSecondHalf

// Define the HIGHT_KeySched function
HIGHT_KeySched_Cryptol : [16][8] -> [136][8]
HIGHT_KeySched_Cryptol MK = RK
  where
    // Generate round-keys
    RK = [ subkey i | i:[8] <- [0..135] ]
      where
        subkey i = 
          if i < 4
          then MK @ (12 + i)
          else if i < 8
          then MK @ (i - 4)
          else if i < 24
          then MK @ (i - 8) + delta_table @ (i - 8)
          else if i < 40
          then (right_update_MK MK) @ (i - 24) + delta_table @ (i - 8)
          else if i < 56
          then (right_update_MK (right_update_MK MK)) @ ((i - 40)) + delta_table @ (i - 8)
          else if i < 72
          then (right_update_MK (right_update_MK (right_update_MK MK))) @ (i - 56)
                + delta_table @ (i - 8)
          else if i < 88
          then (right_update_MK (right_update_MK (right_update_MK (right_update_MK MK)))) @ (i - 72)
                + delta_table @ (i - 8)
          else if i < 104
          then (left_update_MK (left_update_MK (left_update_MK MK))) @ (i - 88) 
                + delta_table @ (i - 8)
          else if i < 120
          then (left_update_MK (left_update_MK MK)) @ (i - 104) + delta_table @ (i - 8)
          else
              (left_update_MK MK) @ (i - 120) + delta_table @ (i - 8)

property HIGHT_KeySched_Cryptol_TESTVECTOR =
  (HIGHT_KeySched_Cryptol TVKey1 == 
  [0x33, 0x22, 0x11, 0x00, 0xff, 0xee, 0xdd, 0xcc] # transformTVSK TVSK1) /\
  (HIGHT_KeySched_Cryptol TVKey2 == 
  ([0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33] # transformTVSK TVSK2)) /\
  (HIGHT_KeySched_Cryptol TVKey3 == 
  ([0x03, 0x02, 0x01, 0x00, 0x0f, 0x0e, 0x0d, 0x0c] # transformTVSK TVSK3)) /\
  (HIGHT_KeySched_Cryptol TVKey4 == 
  ([0xbc, 0xc3, 0xdb, 0x28, 0xe7, 0x2b, 0x42, 0x1d] # transformTVSK TVSK4))

// ======================== Encryption ========================

ByteToWord : [8] -> [32]
ByteToWord b = zero # b  // Extends x from 8 bits to 32 bits

WordToByte : [32] -> [8]
WordToByte w = drop`{0x18} w // Takes the least significant 8 bits

ENC_ROUND : [8][32] -> [4][8] -> ([8], [8], [8], [8], [8], [8], [8], [8]) -> [8][32]
ENC_ROUND XX rk (i0, i1, i2, i3, i4, i5, i6, i7) = 
  if i0 == 7
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t1 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t3 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t5 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t7 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 6
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t0 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t2 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t4 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t6 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 5
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t7 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t1 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t3 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t5 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 4
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t6 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t0 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t2 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t4 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 3
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t5 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t7 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t1 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t3 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 2
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t4 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t6 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t0 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t2 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 1
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t3 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t5 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t7 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t1 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else if i0 == 0
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t2 = ByteToWord (WordToByte ((XX@i6) + (ByteToWord (F1 @ (WordToByte (XX@i7)) ^ (rk @ 0)))))
    t4 = ByteToWord (WordToByte ((XX@i4) ^ (ByteToWord (F0 @ (WordToByte (XX@i5)) + (rk @ 1)))))
    t6 = ByteToWord (WordToByte ((XX@i2) + (ByteToWord (F1 @ (WordToByte (XX@i3)) ^ (rk @ 2)))))
    t0 = ByteToWord (WordToByte ((XX@i0) ^ (ByteToWord (F0 @ (WordToByte (XX@i1)) + (rk @ 3)))))
  else [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]

RK_SUB : [136][8] -> [8] -> [4][8]
RK_SUB RK k = [ RK @ (4 * k + 0),
                RK @ (4 * k + 1),
                RK @ (4 * k + 2),
                RK @ (4 * k + 3) ]

HIGHT_Encrypt_Cryptol : [136][8] -> [8][8] -> [8][8]
HIGHT_Encrypt_Cryptol RK src = dst
  where
    XX_init = [ 
      ByteToWord (src@0 + RK@0), ByteToWord (src@1),
      ByteToWord (src@2 ^ RK@1), ByteToWord (src@3),
      ByteToWord (src@4 + RK@2), ByteToWord (src@5),
      ByteToWord (src@6 ^ RK@3), ByteToWord (src@7) ] : [8][32]

    XX2 = ENC_ROUND XX_init (RK_SUB RK 2) (7,6,5,4,3,2,1,0)
    XX3 = ENC_ROUND XX2 (RK_SUB RK 3) (6,5,4,3,2,1,0,7)
    XX4 = ENC_ROUND XX3 (RK_SUB RK 4) (5,4,3,2,1,0,7,6)
    XX5 = ENC_ROUND XX4 (RK_SUB RK 5) (4,3,2,1,0,7,6,5)
    XX6 = ENC_ROUND XX5 (RK_SUB RK 6) (3,2,1,0,7,6,5,4)
    XX7 = ENC_ROUND XX6 (RK_SUB RK 7) (2,1,0,7,6,5,4,3)
    XX8 = ENC_ROUND XX7 (RK_SUB RK 8) (1,0,7,6,5,4,3,2)
    XX9 = ENC_ROUND XX8 (RK_SUB RK 9) (0,7,6,5,4,3,2,1)
    XX10 = ENC_ROUND XX9 (RK_SUB RK 10) (7,6,5,4,3,2,1,0)
    XX11 = ENC_ROUND XX10 (RK_SUB RK 11) (6,5,4,3,2,1,0,7)
    XX12 = ENC_ROUND XX11 (RK_SUB RK 12) (5,4,3,2,1,0,7,6)
    XX13 = ENC_ROUND XX12 (RK_SUB RK 13) (4,3,2,1,0,7,6,5)
    XX14 = ENC_ROUND XX13 (RK_SUB RK 14) (3,2,1,0,7,6,5,4)
    XX15 = ENC_ROUND XX14 (RK_SUB RK 15) (2,1,0,7,6,5,4,3)
    XX16 = ENC_ROUND XX15 (RK_SUB RK 16) (1,0,7,6,5,4,3,2)
    XX17 = ENC_ROUND XX16 (RK_SUB RK 17) (0,7,6,5,4,3,2,1)
    XX18 = ENC_ROUND XX17 (RK_SUB RK 18) (7,6,5,4,3,2,1,0)
    XX19 = ENC_ROUND XX18 (RK_SUB RK 19) (6,5,4,3,2,1,0,7)
    XX20 = ENC_ROUND XX19 (RK_SUB RK 20) (5,4,3,2,1,0,7,6)
    XX21 = ENC_ROUND XX20 (RK_SUB RK 21) (4,3,2,1,0,7,6,5)
    XX22 = ENC_ROUND XX21 (RK_SUB RK 22) (3,2,1,0,7,6,5,4)
    XX23 = ENC_ROUND XX22 (RK_SUB RK 23) (2,1,0,7,6,5,4,3)
    XX24 = ENC_ROUND XX23 (RK_SUB RK 24) (1,0,7,6,5,4,3,2)
    XX25 = ENC_ROUND XX24 (RK_SUB RK 25) (0,7,6,5,4,3,2,1)
    XX26 = ENC_ROUND XX25 (RK_SUB RK 26) (7,6,5,4,3,2,1,0)
    XX27 = ENC_ROUND XX26 (RK_SUB RK 27) (6,5,4,3,2,1,0,7)
    XX28 = ENC_ROUND XX27 (RK_SUB RK 28) (5,4,3,2,1,0,7,6)
    XX29 = ENC_ROUND XX28 (RK_SUB RK 29) (4,3,2,1,0,7,6,5)
    XX30 = ENC_ROUND XX29 (RK_SUB RK 30) (3,2,1,0,7,6,5,4)
    XX31 = ENC_ROUND XX30 (RK_SUB RK 31) (2,1,0,7,6,5,4,3)
    XX32 = ENC_ROUND XX31 (RK_SUB RK 32) (1,0,7,6,5,4,3,2)
    XX33 = ENC_ROUND XX32 (RK_SUB RK 33) (0,7,6,5,4,3,2,1)

    XX_final = [ 
      WordToByte (XX33@1 + ByteToWord (RK@4)), WordToByte (XX33@2),
      WordToByte (XX33@3 ^ ByteToWord (RK@5)), WordToByte (XX33@4),
      WordToByte (XX33@5 + ByteToWord (RK@6)), WordToByte (XX33@6),
      WordToByte (XX33@7 ^ ByteToWord (RK@7)), WordToByte (XX33@0) ] : [8][8]
    dst = XX_final

property HIGHT_Encrypt_Cryptol_TESTVECTOR =
  (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey1) TVPT1 == TVCT1) /\
  (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey2) TVPT2 == TVCT2) /\
  (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey3) TVPT3 == TVCT3) /\
  (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey4) TVPT4 == TVCT4)

// TEST_RK = [
//   0x02, 0x4B, 0x00, 0xA4, 0x62, 0x00, 0x78, 0x00,
//   0xB2, 0x81, 0x59, 0xA2, 0x2B, 0x98, 0x06, 0x42,
//   0xC4, 0x22, 0xB2, 0xB3, 0x90, 0x13, 0x6D, 0x88,
//   0x0E, 0x4C, 0xE5, 0xEE, 0x47, 0xB1, 0x46, 0x34,
//   0xEE, 0xBD, 0x33, 0x7C, 0xD6, 0xB4, 0xFE, 0xE6,
//   0x4C, 0x5F, 0x5C, 0xB9, 0x85, 0xF5, 0xFF, 0xAF,
//   0xB8, 0x78, 0xE7, 0x9E, 0x6D, 0x36, 0xF1, 0x87,
//   0xE5, 0x1E, 0x52, 0xF8, 0xC1, 0x0A, 0xD7, 0x9B,
//   0x93, 0x23, 0x22, 0x33, 0x63, 0x84, 0x40, 0xEE,
//   0x7C, 0x10, 0x0F, 0xBC, 0xF7, 0x64, 0x87, 0x7A,
//   0xC7, 0x1C, 0x94, 0x6B, 0x3A, 0x74, 0x8D, 0x93,
//   0x77, 0xD8, 0x4F, 0xBE, 0xC4, 0xE2, 0x49, 0xB4,
//   0xDC, 0x9E, 0x91, 0xC0, 0xB0, 0x74, 0x80, 0x2F,
//   0x1A, 0x9E, 0xA2, 0x20, 0x8A, 0xF9, 0xCA, 0x3B,
//   0x1B, 0x02, 0xF9, 0x2C, 0xEB, 0xFF, 0x84, 0x0F,
//   0xB8, 0xFC, 0x75, 0x7F, 0x37, 0x7C, 0xA4, 0x6C,
//   0xA3, 0x83, 0x5B, 0xE9, 0x6F, 0x7B, 0x90, 0x58
// ] : [136][8]

// TEST_SRC = [
//   0x00, 0x30, 0x88, 0x81, 0x20, 0x06, 0xA8, 0xC5
// ] : [8][8]

// ======================== Decryption ========================

// XX[i1] = (XX[i1] - (HIGHT_F1[XX[i2]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[i3] = (XX[i3] ^ (HIGHT_F0[XX[i4]] + RoundKey[4*k+1])) & 0xFF; 
// XX[i5] = (XX[i5] - (HIGHT_F1[XX[i6]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[i7] = (XX[i7] ^ (HIGHT_F0[XX[i0]] + RoundKey[4*k+3])) & 0xFF;

// XX[6] = (XX[6] - (HIGHT_F1[XX[5]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[4] = (XX[4] ^ (HIGHT_F0[XX[3]] + RoundKey[4*k+1])) & 0xFF; 
// XX[2] = (XX[2] - (HIGHT_F1[XX[1]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[0] = (XX[0] ^ (HIGHT_F0[XX[7]] + RoundKey[4*k+3])) & 0xFF;

// XX[0] = (XX[i1] - (HIGHT_F1[XX[i2]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[6] = (XX[i3] ^ (HIGHT_F0[XX[i4]] + RoundKey[4*k+1])) & 0xFF; 
// XX[4] = (XX[i5] - (HIGHT_F1[XX[i6]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[2] = (XX[i7] ^ (HIGHT_F0[XX[1]] + RoundKey[4*k+3])) & 0xFF;

// XX[7] = (XX[7] - (HIGHT_F1[XX[6]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[5] = (XX[5] ^ (HIGHT_F0[XX[4]] + RoundKey[4*k+1])) & 0xFF; 
// XX[3] = (XX[3] - (HIGHT_F1[XX[2]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[1] = (XX[1] ^ (HIGHT_F0[XX[0]] + RoundKey[4*k+3])) & 0xFF;

// XX[1] = (XX[i1] - (HIGHT_F1[XX[i2]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[7] = (XX[i3] ^ (HIGHT_F0[XX[i4]] + RoundKey[4*k+1])) & 0xFF; 
// XX[5] = (XX[i5] - (HIGHT_F1[XX[i6]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[3] = (XX[i7] ^ (HIGHT_F0[XX[i0]] + RoundKey[4*k+3])) & 0xFF;

// XX[i1] = (XX[i1] - (HIGHT_F1[XX[i2]] ^ RoundKey[4*k+2])) & 0xFF;   
// XX[i3] = (XX[i3] ^ (HIGHT_F0[XX[i4]] + RoundKey[4*k+1])) & 0xFF; 
// XX[i5] = (XX[i5] - (HIGHT_F1[XX[i6]] ^ RoundKey[4*k+0])) & 0xFF; 
// XX[i7] = (XX[i7] ^ (HIGHT_F0[XX[i0]] + RoundKey[4*k+3])) & 0xFF;

DEC_ROUND : [8][32] -> [4][8] -> ([8], [8], [8], [8], [8], [8], [8], [8]) -> [8][32]
DEC_ROUND XX rk (i0, i1, i2, i3, i4, i5, i6, i7) = 
  if i0 == 7
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t0 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t2 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t4 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t6 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 0
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t1 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t3 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t5 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t7 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 1
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t2 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t4 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t6 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t0 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 2
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t3 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t5 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t7 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t1 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 3
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t4 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t6 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t0 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t2 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 4
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t5 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t7 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t1 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t3 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 5
  then [ t0, XX@1, t2, XX@3, t4, XX@5, t6, XX@7] where
    t6 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t0 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t2 = ByteToWord (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t4 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else if i0 == 6
  then [ XX@0, t1, XX@2, t3, XX@4, t5, XX@6, t7] where
    t7 = ByteToWord (WordToByte ((XX@i7) ^ (ByteToWord (F0 @ (WordToByte (XX@i0)) + (rk @ 3)))))
    t1 = ByteToWord (WordToByte ((XX@i5) - (ByteToWord (F1 @ (WordToByte (XX@i6)) ^ (rk @ 0)))))
    t3 = ByteToWor/*
  @Copyright (c) 2024 Crypto & Security Engineering Lab (CSE).
  @author Ji, Yong-hyeon <hacker3740@kookmin.ac.kr>
  https://sites.google.com/kookmin.ac.kr/cselab/club-activity?authuser=0
  
  Distributed under the terms of the BSD3 license (see LICENSE file)

  References
  Using the Software Analysis Workbench (SAW)
 */d (WordToByte ((XX@i3) ^ (ByteToWord (F0 @ (WordToByte (XX@i4)) + (rk @ 1)))))
    t5 = ByteToWord (WordToByte ((XX@i1) - (ByteToWord (F1 @ (WordToByte (XX@i2)) ^ (rk @ 2)))))
  else [0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]

HIGHT_Decrypt_Cryptol : [136][8] -> [8][8] -> [8][8]
HIGHT_Decrypt_Cryptol RK src = dst
  where
    XX_init = [ 
      ByteToWord (src@7), ByteToWord (src@0 - RK@4),
      ByteToWord (src@1), ByteToWord (src@2 ^ RK@5),
      ByteToWord (src@3), ByteToWord (src@4 - RK@6),
      ByteToWord (src@5), ByteToWord (src@6 ^ RK@7) ] : [8][32]

    XX33 = DEC_ROUND XX_init (RK_SUB RK 33) (7,6,5,4,3,2,1,0)
    XX32 = DEC_ROUND XX33 (RK_SUB RK 32) (0,7,6,5,4,3,2,1)
    XX31 = DEC_ROUND XX32 (RK_SUB RK 31) (1,0,7,6,5,4,3,2)
    XX30 = DEC_ROUND XX31 (RK_SUB RK 30) (2,1,0,7,6,5,4,3)
    XX29 = DEC_ROUND XX30 (RK_SUB RK 29) (3,2,1,0,7,6,5,4)
    XX28 = DEC_ROUND XX29 (RK_SUB RK 28) (4,3,2,1,0,7,6,5)
    XX27 = DEC_ROUND XX28 (RK_SUB RK 27) (5,4,3,2,1,0,7,6)
    XX26 = DEC_ROUND XX27 (RK_SUB RK 26) (6,5,4,3,2,1,0,7)
    XX25 = DEC_ROUND XX26 (RK_SUB RK 25) (7,6,5,4,3,2,1,0)
    XX24 = DEC_ROUND XX25 (RK_SUB RK 24) (0,7,6,5,4,3,2,1)
    XX23 = DEC_ROUND XX24 (RK_SUB RK 23) (1,0,7,6,5,4,3,2)
    XX22 = DEC_ROUND XX23 (RK_SUB RK 22) (2,1,0,7,6,5,4,3)
    XX21 = DEC_ROUND XX22 (RK_SUB RK 21) (3,2,1,0,7,6,5,4)
    XX20 = DEC_ROUND XX21 (RK_SUB RK 20) (4,3,2,1,0,7,6,5)
    XX19 = DEC_ROUND XX20 (RK_SUB RK 19) (5,4,3,2,1,0,7,6)
    XX18 = DEC_ROUND XX19 (RK_SUB RK 18) (6,5,4,3,2,1,0,7)
    XX17 = DEC_ROUND XX18 (RK_SUB RK 17) (7,6,5,4,3,2,1,0)
    XX16 = DEC_ROUND XX17 (RK_SUB RK 16) (0,7,6,5,4,3,2,1)
    XX15 = DEC_ROUND XX16 (RK_SUB RK 15) (1,0,7,6,5,4,3,2)
    XX14 = DEC_ROUND XX15 (RK_SUB RK 14) (2,1,0,7,6,5,4,3)
    XX13 = DEC_ROUND XX14 (RK_SUB RK 13) (3,2,1,0,7,6,5,4)
    XX12 = DEC_ROUND XX13 (RK_SUB RK 12) (4,3,2,1,0,7,6,5)
    XX11 = DEC_ROUND XX12 (RK_SUB RK 11) (5,4,3,2,1,0,7,6)
    XX10 = DEC_ROUND XX11 (RK_SUB RK 10) (6,5,4,3,2,1,0,7)
    XX9 = DEC_ROUND XX10 (RK_SUB RK 9) (7,6,5,4,3,2,1,0)
    XX8 = DEC_ROUND XX9 (RK_SUB RK 8) (0,7,6,5,4,3,2,1)
    XX7 = DEC_ROUND XX8 (RK_SUB RK 7) (1,0,7,6,5,4,3,2)
    XX6 = DEC_ROUND XX7 (RK_SUB RK 6) (2,1,0,7,6,5,4,3)
    XX5 = DEC_ROUND XX6 (RK_SUB RK 5) (3,2,1,0,7,6,5,4)
    XX4 = DEC_ROUND XX5 (RK_SUB RK 4) (4,3,2,1,0,7,6,5)
    XX3 = DEC_ROUND XX4 (RK_SUB RK 3) (5,4,3,2,1,0,7,6)
    XX2 = DEC_ROUND XX3 (RK_SUB RK 2) (6,5,4,3,2,1,0,7)

    XX_L=XX2
    XX_final = [ 
      WordToByte (XX_L@0 - ByteToWord (RK@0)), WordToByte (XX_L@1),
      WordToByte (XX_L@2 ^ ByteToWord (RK@1)), WordToByte (XX_L@3),
      WordToByte (XX_L@4 - ByteToWord (RK@2)), WordToByte (XX_L@5),
      WordToByte (XX_L@6 ^ ByteToWord (RK@3)), WordToByte (XX_L@7) ] : [8][8]
    dst = XX_final

property HIGHT_TESTVECTOR =
  HIGHT_Decrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey1) (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey1) TVPT1) == TVPT1 /\
  HIGHT_Decrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey2) (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey2) TVPT2) == TVPT2 /\
  HIGHT_Decrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey3) (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey3) TVPT3) == TVPT3 /\
  HIGHT_Decrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey4) (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol TVKey4) TVPT4) == TVPT4

property KISA_HIGHT_Correctness (src : [8][8]) (key : [16][8]) = 
    HIGHT_Decrypt_Cryptol (HIGHT_KeySched_Cryptol key) 
    (HIGHT_Encrypt_Cryptol (HIGHT_KeySched_Cryptol key) src) == src