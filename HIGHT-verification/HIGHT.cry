/*
 * Copyright (c) 2024 Crypto & Security Engineering Lab (CSE).
 * https://sites.google.com/kookmin.ac.kr/cselab/club-activity?authuser=0
 * Distributed under the terms of the BSD3 license (see LICENSE file)
 */

module HIGHT where

// Test Vectors
tvKey1 : [128]
tvKey1 = 0x00112233445566778899aabbccddeeff
tvKey2 : [128]
tvKey2 = 0xffeeddccbbaa99887766554433221100
tvKey3 : [128]
tvKey3 = 0x000102030405060708090a0b0c0d0e0f
tvKey4 : [128]
tvKey4 = 0x28dbc3bc49ffd87dcfa509b11d422be7

tvPT1 : [64]
tvPT1 = zero
tvPT2 : [64]
tvPT2 = 0x0011223344556677
tvPT3 : [64]
tvPT3 = 0x0123456789abcdef
tvPT4 : [64]
tvPT4 = 0xb41e6be2eba84a14

tvCT1 : [64]
tvCT1 = 0x00f418aed94f03f2
tvCT2 : [64]
tvCT2 = 0x23ce9f72e543e6d8
tvCT3 : [64]
tvCT3 = 0x7a6fb2a28d23f466
tvCT4 : [64]
tvCT4 = 0xcc047a75209c1fc6

TVKey1 : [16][8]
TVKey1 = reverse (split (tvKey1 : [128]))
TVKey2 : [16][8]
TVKey2 = reverse (split (tvKey2 : [128]))
TVKey3 : [16][8]
TVKey3 = reverse (split (tvKey3 : [128]))
TVKey4 : [16][8]
TVKey4 = reverse (split (tvKey4 : [128]))

TVPT1 : [8][8]
TVPT1 = reverse (split (tvPT1 : [64]))
TVPT2 : [8][8]
TVPT2 = reverse (split (tvPT2 : [64]))
TVPT3 : [8][8]
TVPT3 = reverse (split (tvPT3 : [64]))
TVPT4 : [8][8]
TVPT4 = reverse (split (tvPT4 : [64]))

TVCT1 : [8][8]
TVCT1 = reverse (split (tvCT1 : [64]))
TVCT2 : [8][8]
TVCT2 = reverse (split (tvCT2 : [64]))
TVCT3 : [8][8]
TVCT3 = reverse (split (tvCT3 : [64]))
TVCT4 : [8][8]
TVCT4 = reverse (split (tvCT4 : [64]))


TVSK1 = [0xe7135b59, 0xc99cb0c8, 0x906d96d7, 0x2c6a5599,
 0x27032ade, 0xb5e32d31, 0xced9de4e, 0x48919180,
 0xf915b5f4, 0xfadc0ee2, 0xbba15439, 0x9fadb9bf,
 0x16b7f8e8, 0xe41e0239, 0xd9451b36, 0xa9b0ad97,
 0xcfa7c7f6, 0x48555f62, 0x1f50a1b1, 0xa5986d86,
 0x0706f33c, 0xfb2b7aff, 0x7a755a93, 0x7bb39134,
 0xbcdf15f0, 0xef018ca2, 0x2a436495, 0xae882255,
 0xc7e50f52, 0x67d9bcf0, 0x61a18fda, 0xd1357c79] : [32][32] // 32 * 32 = 128 * 16, 1024-bit (128-byte)
 
TVSK2 = [ 0x4e587e5a, 0xb8695b51, 0x07c2c9e8, 0x2b471032,
  0x6c262bcd, 0x828eb698, 0x230cef4d, 0x254c2af7,
  0x1c16a4c1, 0xa5657527, 0xeeb25316, 0x5a463014,
  0x17a6c593, 0x6d85475c, 0xea44f8f1, 0x422702ca,
  0xbe74727f, 0xaf9a8263, 0x1e2d5c4a, 0x1ceda097,
  0xd4b17ca3, 0x404e7bee, 0x5730f30a, 0xd0e6a233,
  0x67687c35, 0x12027b6f, 0xe5dcdbea, 0xe1992132,
  0x504c5475, 0x68c8899b, 0xfa18e40d, 0xe2345934 ] : [32][32]

TVSK3 = [ 0x27437b69, 0x490c1018, 0x501d3667, 0x2c5a3569,
  0x57233a5e, 0x25437d71, 0x7e796e4e, 0x38716140,
  0x19253564, 0x5a2c4e12, 0x5b315429, 0x7f7d796f,
  0x26376848, 0x345e3259, 0x69450b16, 0x79705d37,
  0x4f172746, 0x88857f72, 0x1f408181, 0x65480d16,
  0x7766437c, 0x2b4b8a7f, 0x6a552a53, 0x2b532134,
  0x1c2f5520, 0x0f110c12, 0x0a132445, 0x4e182245,
  0x17253f72, 0x77592c50, 0x31613f7a, 0x61356c59 ] : [32][32]

TVSK4 = [ 0x38789841, 0x10a80fbe, 0x951708dd, 0x5434f622,
  0x8c401225, 0xc1422382, 0x784be476, 0x12321a85,
  0x36fdfc00, 0x59d25f47, 0x2da77c03, 0x4036be69,
  0xfefe0447, 0xda6f6776, 0xdf6de5d7, 0x32b55709,
  0x16b326ec, 0x99ba9c4a, 0x471a423a, 0xaa42df8c,
  0x1365e98d, 0x60686246, 0x4416e398, 0x2525975c,
  0x1bd56655, 0x2ce9d3ae, 0xcbcc693f, 0x208e4a1f,
  0xbd36748f, 0x4f20c84f, 0xeaa6394c, 0xd75d461a ] : [32][32]

// Function to reverse the bytes in a 32-bit word
reverseBytesInWord : [32] -> [4][8]
reverseBytesInWord w = reverse (split w)

// Function to transform the list of 32-bit words
transformTVSK : [32][32] -> [128][8]
transformTVSK words = join [reverseBytesInWord w | w <- words]

// Implementation of HIGHT with Cryptol Language

// Pre-computation Table for Delta (LFSR)
delta_table : [128][8]
delta_table = [ 
    0x5a, 0x6d, 0x36, 0x1b, 0x0d, 0x06, 0x03, 0x41, // 0 ~ 7
    0x60, 0x30, 0x18, 0x4c, 0x66, 0x33, 0x59, 0x2c, // 8 ~ 15
    0x56, 0x2b, 0x15, 0x4a, 0x65, 0x72, 0x39, 0x1c, // 16 ~ 23 
    0x4e, 0x67, 0x73, 0x79, 0x3c, 0x5e, 0x6f, 0x37, // 24 ~ 31 
    0x5b, 0x2d, 0x16, 0x0b, 0x05, 0x42, 0x21, 0x50, // 32 ~ 39 
    0x28, 0x54, 0x2a, 0x55, 0x6a, 0x75, 0x7a, 0x7d, // 40 ~ 47 
    0x3e, 0x5f, 0x2f, 0x17, 0x4b, 0x25, 0x52, 0x29, // 48 ~ 55 
    0x14, 0x0a, 0x45, 0x62, 0x31, 0x58, 0x6c, 0x76, // 56 ~ 63 
    0x3b, 0x1d, 0x0e, 0x47, 0x63, 0x71, 0x78, 0x7c, // 64 ~ 71 
    0x7e, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x43, 0x61, // 72 ~ 79 
    0x70, 0x38, 0x5c, 0x6e, 0x77, 0x7b, 0x3d, 0x1e, // 80 ~ 87 
    0x4f, 0x27, 0x53, 0x69, 0x34, 0x1a, 0x4d, 0x26, // 88 ~ 95 
    0x13, 0x49, 0x24, 0x12, 0x09, 0x04, 0x02, 0x01, // 96 ~ 103 
    0x40, 0x20, 0x10, 0x08, 0x44, 0x22, 0x11, 0x48, // 104 ~ 111 
    0x64, 0x32, 0x19, 0x0c, 0x46, 0x23, 0x51, 0x68, // 112 ~ 119 
    0x74, 0x3a, 0x5d, 0x2e, 0x57, 0x6b, 0x35, 0x5a  // 120 ~ 127
 ]

// ======================== Key Schedule ========================

// Function to rotate the second half of the key once to the left
rotateLeft8 : [8][8] -> [8][8]
rotateLeft8 block = drop`{1} block # take`{1} block

rotateRight8 : [8][8] -> [8][8]
rotateRight8 block = drop`{7} block # take`{7} block

updateMK : [16][8] -> [16][8]
updateMK mk = rotatedMK
    where
    (firstHalf, secondHalf) = splitAt`{8} mk
    rotatedFirstHalf = rotateRight8 firstHalf
    rotatedSecondHalf = rotateRight8 secondHalf
    rotatedMK = rotatedFirstHalf # rotatedSecondHalf

updateMK2 : [16][8] -> [16][8]
updateMK2 mk = rotatedMK
    where
    (firstHalf, secondHalf) = splitAt`{8} mk
    rotatedFirstHalf = rotateLeft8 firstHalf
    rotatedSecondHalf = rotateLeft8 secondHalf
    rotatedMK = rotatedFirstHalf # rotatedSecondHalf

// Define the encKeySchedule function
encKeySchedule : ([8][8], [128][8], [16][8]) -> ([8][8], [128][8])
encKeySchedule (_, _, MK) = (enc_WK, enc_SK)
  where
    // Generate whitening keys
    enc_WK = [
      MK@12, MK@13, MK@14, MK@15,
      MK@0, MK@1, MK@2, MK@3
    ]

    // Generate subkeys
    enc_SK = [ subkey i | i:[8] <- [0..127] ]
      where
        subkey i = 
          if i < 16
          then MK @ i + delta_table @ i
          else if i < 32
          then (updateMK MK) @ (i - 16) + delta_table @ i
          else if i < 48
          then (updateMK (updateMK MK)) @ ((i - 32)) + delta_table @ i
          else if i < 64
          then (updateMK (updateMK (updateMK MK))) @ (i - 48)
                + delta_table @ i
          else if i < 80
          then (updateMK (updateMK (updateMK (updateMK MK)))) @ (i - 64)
                + delta_table @ i
          else if i < 96
          then (updateMK2 (updateMK2 (updateMK2 MK))) @ (i - 80) 
                + delta_table @ i
          else if i < 112
          then (updateMK2 (updateMK2 MK)) @ (i - 96) + delta_table @ i
          else
              (updateMK2 MK) @ (i - 112) + delta_table @ i

// Define the decKeySchedule function
decKeySchedule : ([8][8], [128][8], [16][8]) -> ([8][8], [128][8])
decKeySchedule (_, _, MK) = (dec_WK, dec_SK)
  where
    // Generate whitening keys
    dec_WK = [
      MK@12, MK@13, MK@14, MK@15,
      MK@0, MK@1, MK@2, MK@3
    ]

    // Generate subkeys
    dec_SK = [ subkey i | i:[8] <- [0..127] ]
      where
        subkey i = 
          if i < 16
          then (updateMK2 MK) @ (15 - i) + delta_table @ (127 - i)
          else if i < 32
          then (updateMK2 (updateMK2 MK)) @ (31 - i) + delta_table @ (127 - i)
          else if i < 48
          then (updateMK2 (updateMK2 (updateMK2 MK))) @ (47 - i) 
                + delta_table @ (127 - i)
          else if i < 64
          then (updateMK (updateMK (updateMK (updateMK MK)))) @ (63 - i)
                + delta_table @ (127 - i)
          else if i < 80
          then (updateMK (updateMK (updateMK MK))) @ (79 - i)
                + delta_table @ (127 - i)
          else if i < 96
          then (updateMK (updateMK MK)) @ (95 - i) + delta_table @ (127 - i)
          else if i < 112
          then (updateMK MK) @ (111 - i) + delta_table @ (127 - i)
          else
              MK @ (127 - i) + delta_table @ (127 - i)


property KeySchedule_TESTVECTOR =
  (encKeySchedule (zero, zero, TVKey1) == 
  ([0x33, 0x22, 0x11, 0x00, 0xff, 0xee, 0xdd, 0xcc], transformTVSK TVSK1)) /\
  (encKeySchedule (zero, zero, TVKey2) == 
  ([0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33], transformTVSK TVSK2)) /\
  (encKeySchedule (zero, zero, TVKey3) == 
  ([0x03, 0x02, 0x01, 0x00, 0x0f, 0x0e, 0x0d, 0x0c], transformTVSK TVSK3)) /\
  (encKeySchedule (zero, zero, TVKey4) == 
  ([0xbc, 0xc3, 0xdb, 0x28, 0xe7, 0x2b, 0x42, 0x1d], transformTVSK TVSK4))

property KeySchedule_WK =
  (enc_WK1 == dec_WK1) /\ (enc_WK2 == dec_WK2) /\
  (enc_WK3 == dec_WK3) /\ (enc_WK4 == dec_WK4)
    where
      (enc_WK1, _) = encKeySchedule (zero, zero, TVKey1)
      (dec_WK1, _) = decKeySchedule (zero, zero, TVKey1)
      (enc_WK2, _) = encKeySchedule (zero, zero, TVKey2)
      (dec_WK2, _) = decKeySchedule (zero, zero, TVKey2)
      (enc_WK3, _) = encKeySchedule (zero, zero, TVKey3)
      (dec_WK3, _) = decKeySchedule (zero, zero, TVKey3)
      (enc_WK4, _) = encKeySchedule (zero, zero, TVKey4)
      (dec_WK4, _) = decKeySchedule (zero, zero, TVKey4)

property KeySchedule_SK =
  (enc_SK1 == reverse dec_SK1) /\
  (enc_SK2 == reverse dec_SK2) /\
  (enc_SK3 == reverse dec_SK3) /\
  (enc_SK4 == reverse dec_SK4)
    where
      (_, enc_SK1) = encKeySchedule (zero, zero, TVKey1)
      (_, dec_SK1) = decKeySchedule (zero, zero, TVKey1)
      (_, enc_SK2) = encKeySchedule (zero, zero, TVKey2)
      (_, dec_SK2) = decKeySchedule (zero, zero, TVKey2)
      (_, enc_SK3) = encKeySchedule (zero, zero, TVKey3)
      (_, dec_SK3) = decKeySchedule (zero, zero, TVKey3)
      (_, enc_SK4) = encKeySchedule (zero, zero, TVKey4)
      (_, dec_SK4) = decKeySchedule (zero, zero, TVKey4)

// ======================== Encryption ========================

F0 : [8] -> [8]
F0 byte = (byte <<< 1) ^ (byte <<< 2) ^ (byte <<< 7)

F1 : [8] -> [8]
F1 byte = (byte <<< 3) ^ (byte <<< 4) ^ (byte <<< 6)

// Function to perform a single round of HIGHT encryption
enc_round : [8][8] -> [128][8] -> [8] -> [8][8]
enc_round state SK i = [
    t0 ^ (F0 t1 + SK @ (i * 4 + 3)),
    state @ 0,
    state @ 1 + (F1 (state @ 0) ^ SK @ (i * 4 + 0)),
    state @ 2,
    state @ 3 ^ (F0 (state @ 2) + SK @ (i * 4 + 1)),
    state @ 4,
    state @ 5 + (F1 (state @ 4) ^ SK @ (i * 4 + 2)),
    state @ 6
  ]
  where
    t0 = state @ 7
    t1 = state @ 6

// Function to perform all 31 rounds of HIGHT encryption
enc_rounds : [8][8] -> [128][8] -> [8][8]
enc_rounds state SK = foldl (\s i -> enc_round s SK i) state [0..30]

HIGHT_Encrypt : ([8][8], [8][8], [16][8]) -> [8][8]
HIGHT_Encrypt (_, src, MK) = dst
  where
    (WK, SK) = encKeySchedule(zero, zero, MK)
    
    initialState = [ src @ 0 + WK @ 0,
                    src @ 1,
                    src @ 2 ^ WK @ 1,
                    src @ 3,
                    src @ 4 + WK @ 2,
                    src @ 5,
                    src @ 6 ^ WK @ 3,
                    src @ 7 ] : [8][8]
    
    afterRounds : [8][8]
    afterRounds = enc_rounds initialState SK

    finalState = [
      afterRounds @ 0 + WK @ 4,
      afterRounds @ 1 + (F1 (afterRounds @ 0) ^ SK @ 124),
      afterRounds @ 2 ^ WK @ 5,
      afterRounds @ 3 ^ (F0 (afterRounds @ 2) + SK @ 125),
      afterRounds @ 4 + WK @ 6,
      afterRounds @ 5 + (F1 (afterRounds @ 4) ^ SK @ 126),
      afterRounds @ 6 ^ WK @ 7,
      afterRounds @ 7 ^ (F0 (afterRounds @ 6) + SK @ 127)
    ] : [8][8]

    dst = finalState

property Encryption_TESTVECTOR =
  (HIGHT_Encrypt (zero, TVPT1, TVKey1) == TVCT1) /\
  (HIGHT_Encrypt (zero, TVPT2, TVKey2) == TVCT2) /\
  (HIGHT_Encrypt (zero, TVPT3, TVKey3) == TVCT3) /\
  (HIGHT_Encrypt (zero, TVPT4, TVKey4) == TVCT4)

// ======================== Decryption ========================

// Function to perform a single round of HIGHT encryption
dec_round : [8][8] -> [128][8] -> [8] -> [8][8]
dec_round state SK i = [
    state @ 1,
    t2 - (F1(state @ 1) ^ (SK @ (i * 4 + 3))),
    state @ 3,
    t4 ^ F0(state @ 3) + (SK @ (i * 4 + 2)),
    state @ 5,
    t6 - (F1(state @ 5) ^ (SK @ (i * 4 + 1))),
    state @ 7,
    t0 ^ F0(state @ 7) + (SK @ (i * 4 + 0))
  ]
  where
    t0 = state @ 0
    t2 = state @ 2
    t4 = state @ 4
    t6 = state @ 6

// Function to perform all 31 rounds of HIGHT decryption
dec_rounds : [8][8] -> [128][8] -> [8][8]
dec_rounds state SK = foldl (\s i -> dec_round s SK i) state [1..31]

HIGHT_Decrypt : ([8][8], [8][8], [16][8]) -> [8][8]
HIGHT_Decrypt (_, src, MK) = dst
  where
    (WK, SK) = decKeySchedule(zero, zero, MK)

    initialState : [8][8]
    initialState = [
      t0,
      src @ 1 - ((F1 t0) ^ (SK @ 3)),
      t2,
      src @ 3 ^ ((F0 t2) + (SK @ 2)),
      t4,
      src @ 5 - ((F1 t4) ^ (SK @ 1)),
      t6,
      src @ 7 ^ ((F0 t6) + (SK @ 0))
    ] where
      t0 = src @ 0 - WK @ 4
      t2 = src @ 2 ^ WK @ 5
      t4 = src @ 4 - WK @ 6
      t6 = src @ 6 ^ WK @ 7

    afterRounds : [8][8]
    afterRounds = dec_rounds initialState SK

    finalState = [ afterRounds @ 0 - WK @ 0,
                    afterRounds @ 1,
                    afterRounds @ 2 ^ WK @ 1,
                    afterRounds @ 3,
                    afterRounds @ 4 - WK @ 2,
                    afterRounds @ 5,
                    afterRounds @ 6 ^ WK @ 3,
                    afterRounds @ 7 ] : [8][8]
    
    dst = finalState

property HIGHT_TESTVECTOR =
  HIGHT_Decrypt (zero,  HIGHT_Encrypt (zero, TVPT1, TVKey1), TVKey1) == TVPT1 /\
  HIGHT_Decrypt (zero,  HIGHT_Encrypt (zero, TVPT2, TVKey2), TVKey2) == TVPT2 /\
  HIGHT_Decrypt (zero,  HIGHT_Encrypt (zero, TVPT3, TVKey3), TVKey3) == TVPT3 /\
  HIGHT_Decrypt (zero,  HIGHT_Encrypt (zero, TVPT4, TVKey4), TVKey4) == TVPT4

// property HIGHT_Correctness (src : [8][8]) (key : [16][8]) = 
//     HIGHT_Decrypt (zero, HIGHT_Encrypt (zero, src, key), key) == src
