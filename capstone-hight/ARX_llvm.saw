set_base 16;

print "Loading the ARX llvm module";
l <- llvm_load_module "ARX_llvm.bc";

print "Extracting reference term: add_standard";
add_standard <- crucible_llvm_extract l "add_standard";

print "Extracting reference term: xor_standard";
xor_standard <- crucible_llvm_extract l "xor_standard";

print "Assigning Cryptol implementation: add_cryptol";
let {{
    add_cryptol : [8] -> [8] -> [8]
    add_cryptol a b = a + b
}};

print "Assigning Cryptol implementation: xor_cryptol";
let {{
    xor_cryptol : [8] -> [8] -> [8]
    xor_cryptol a b = a ^ b
}};


// Prove theorems about these terms that each each implementation is
// equivalent to each of the otehrs

print "Proving equivalence: add_standard == add_cryptol";
let thm1 = {{ \x -> \y -> add_standard x y == add_cryptol x y}};
result <- prove z3 thm1;
print result;

print "Proving equivalence: xor_standard == xor_cryptol";
let thm2 = {{ \x -> \y -> xor_standard x y == xor_cryptol x y}};
result <- prove z3 thm2;
print result;

print "Done.";